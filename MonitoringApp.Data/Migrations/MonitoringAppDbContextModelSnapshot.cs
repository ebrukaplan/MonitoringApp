// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MonitoringApp.Data;

#nullable disable

namespace MonitoringApp.Data.Migrations
{
    [DbContext(typeof(MonitoringAppDbContext))]
    partial class MonitoringAppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MonitoringApp.Model.Entities.Application", b =>
                {
                    b.Property<int>("ApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApplicationId"));

                    b.Property<string>("ApplicationName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ApplicationUrl")
                        .IsRequired()
                        .HasMaxLength(1500)
                        .HasColumnType("nvarchar(1500)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IntegrationTypeId")
                        .HasColumnType("int");

                    b.Property<int>("MonitorInterval")
                        .HasColumnType("int");

                    b.HasKey("ApplicationId");

                    b.HasIndex("IntegrationTypeId")
                        .IsUnique();

                    b.ToTable("Applications");

                    b.HasData(
                        new
                        {
                            ApplicationId = 1,
                            ApplicationName = "Google",
                            ApplicationUrl = "www.google.com",
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2023, 4, 7, 14, 44, 49, 685, DateTimeKind.Local).AddTicks(5969),
                            IntegrationTypeId = 1,
                            MonitorInterval = 30
                        });
                });

            modelBuilder.Entity("MonitoringApp.Model.Entities.IntegrationType", b =>
                {
                    b.Property<int>("IntegrationTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IntegrationTypeId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IntegrationTypeDescription")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("IntegrationTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IntegrationTypeId");

                    b.ToTable("IntegrationTypes");

                    b.HasData(
                        new
                        {
                            IntegrationTypeId = 1,
                            CreatedDate = new DateTime(2023, 4, 7, 14, 44, 49, 685, DateTimeKind.Local).AddTicks(5954),
                            IntegrationTypeDescription = "when the app has down, send an email",
                            IntegrationTypeName = "email"
                        });
                });

            modelBuilder.Entity("MonitoringApp.Model.Entities.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            CreatedDate = new DateTime(2023, 4, 7, 14, 44, 49, 685, DateTimeKind.Local).AddTicks(5854),
                            RoleName = "Standart"
                        },
                        new
                        {
                            RoleId = 2,
                            CreatedDate = new DateTime(2023, 4, 7, 14, 44, 49, 685, DateTimeKind.Local).AddTicks(5862),
                            RoleName = "Admin"
                        });
                });

            modelBuilder.Entity("MonitoringApp.Model.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("HashPassword")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            AccountName = "Ebru",
                            CreatedDate = new DateTime(2023, 4, 7, 14, 44, 49, 685, DateTimeKind.Local).AddTicks(5944),
                            HashPassword = "123",
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            AccountName = "admin",
                            CreatedDate = new DateTime(2023, 4, 7, 14, 44, 49, 685, DateTimeKind.Local).AddTicks(5946),
                            HashPassword = "123",
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("MonitoringApp.Model.Entities.Application", b =>
                {
                    b.HasOne("MonitoringApp.Model.Entities.IntegrationType", "IntegrationType")
                        .WithOne("Application")
                        .HasForeignKey("MonitoringApp.Model.Entities.Application", "IntegrationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IntegrationType");
                });

            modelBuilder.Entity("MonitoringApp.Model.Entities.User", b =>
                {
                    b.HasOne("MonitoringApp.Model.Entities.Role", "Roles")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("MonitoringApp.Model.Entities.IntegrationType", b =>
                {
                    b.Navigation("Application")
                        .IsRequired();
                });

            modelBuilder.Entity("MonitoringApp.Model.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}

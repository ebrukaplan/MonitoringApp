// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MonitoringApp.Data;

#nullable disable

namespace MonitoringApp.Data.Migrations
{
    [DbContext(typeof(MonitoringAppDbContext))]
    [Migration("20230413145107_ilk")]
    partial class ilk
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MonitoringApp.Model.Entities.Application", b =>
                {
                    b.Property<int>("ApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApplicationId"), 1L, 1);

                    b.Property<string>("ApplicationName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ApplicationUrl")
                        .IsRequired()
                        .HasMaxLength(1500)
                        .HasColumnType("nvarchar(1500)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IntegrationTypeId")
                        .HasColumnType("int");

                    b.Property<int>("MonitorInterval")
                        .HasColumnType("int");

                    b.Property<string>("NotifyList")
                        .IsRequired()
                        .HasMaxLength(2500)
                        .HasColumnType("nvarchar(2500)");

                    b.Property<bool>("isDown")
                        .HasColumnType("bit");

                    b.Property<bool>("isNotified")
                        .HasColumnType("bit");

                    b.HasKey("ApplicationId");

                    b.HasIndex("IntegrationTypeId")
                        .IsUnique();

                    b.ToTable("Applications");

                    b.HasData(
                        new
                        {
                            ApplicationId = 1,
                            ApplicationName = "Google",
                            ApplicationUrl = "https://www.google.com/",
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2023, 4, 13, 17, 51, 6, 898, DateTimeKind.Local).AddTicks(162),
                            IntegrationTypeId = 1,
                            MonitorInterval = 30,
                            NotifyList = "",
                            isDown = false,
                            isNotified = false
                        },
                        new
                        {
                            ApplicationId = 2,
                            ApplicationName = "İşbank",
                            ApplicationUrl = "https://www.isbank.com.tr/",
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2023, 4, 13, 17, 51, 6, 898, DateTimeKind.Local).AddTicks(164),
                            IntegrationTypeId = 1,
                            MonitorInterval = 60,
                            NotifyList = "",
                            isDown = false,
                            isNotified = false
                        },
                        new
                        {
                            ApplicationId = 3,
                            ApplicationName = "Akbank",
                            ApplicationUrl = "https://www.akbank.com/tr-tr/sayfalar/default.aspx",
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2023, 4, 13, 17, 51, 6, 898, DateTimeKind.Local).AddTicks(165),
                            IntegrationTypeId = 1,
                            MonitorInterval = 60,
                            NotifyList = "",
                            isDown = false,
                            isNotified = false
                        },
                        new
                        {
                            ApplicationId = 4,
                            ApplicationName = "Garanti Bankası",
                            ApplicationUrl = "https://www.garantibbva.com.tr/",
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2023, 4, 13, 17, 51, 6, 898, DateTimeKind.Local).AddTicks(166),
                            IntegrationTypeId = 1,
                            MonitorInterval = 120,
                            NotifyList = "",
                            isDown = false,
                            isNotified = false
                        },
                        new
                        {
                            ApplicationId = 5,
                            ApplicationName = "StackOverFlow",
                            ApplicationUrl = "https://stackoverflow.co/explore-teams/?utm_source=adwords&utm_medium=ppc&utm_campaign=kb_teams_search_nb_dsa_targeted_audiences_emea-dach&_bt=646019453177&_bk=&_bm=&_bn=g&gclid=EAIaIQobChMI46KLhaGh_gIVjplRCh18BQVdEAAYASAAEgLIA_D_BwE",
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2023, 4, 13, 17, 51, 6, 898, DateTimeKind.Local).AddTicks(167),
                            IntegrationTypeId = 1,
                            MonitorInterval = 20,
                            NotifyList = "",
                            isDown = false,
                            isNotified = false
                        });
                });

            modelBuilder.Entity("MonitoringApp.Model.Entities.ApplicationLog", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LogId"), 1L, 1);

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LogMessage")
                        .IsRequired()
                        .HasMaxLength(2500)
                        .HasColumnType("nvarchar(2500)");

                    b.HasKey("LogId");

                    b.HasIndex("ApplicationId");

                    b.ToTable("ApplicationLogs");
                });

            modelBuilder.Entity("MonitoringApp.Model.Entities.IntegrationType", b =>
                {
                    b.Property<int>("IntegrationTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IntegrationTypeId"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IntegrationTypeDescription")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("IntegrationTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IntegrationTypeId");

                    b.ToTable("IntegrationTypes");

                    b.HasData(
                        new
                        {
                            IntegrationTypeId = 1,
                            CreatedDate = new DateTime(2023, 4, 13, 17, 51, 6, 898, DateTimeKind.Local).AddTicks(151),
                            IntegrationTypeDescription = "when the app has down, send an email to notifyList",
                            IntegrationTypeName = "email"
                        });
                });

            modelBuilder.Entity("MonitoringApp.Model.Entities.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            CreatedDate = new DateTime(2023, 4, 13, 17, 51, 6, 898, DateTimeKind.Local).AddTicks(31),
                            RoleName = "Standart"
                        },
                        new
                        {
                            RoleId = 2,
                            CreatedDate = new DateTime(2023, 4, 13, 17, 51, 6, 898, DateTimeKind.Local).AddTicks(40),
                            RoleName = "Admin"
                        });
                });

            modelBuilder.Entity("MonitoringApp.Model.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("HashPassword")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            AccountName = "Ebru",
                            CreatedDate = new DateTime(2023, 4, 13, 17, 51, 6, 898, DateTimeKind.Local).AddTicks(137),
                            HashPassword = "PuB/hselpQNY0TYpY06RfnYVNjE=",
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            AccountName = "admin",
                            CreatedDate = new DateTime(2023, 4, 13, 17, 51, 6, 898, DateTimeKind.Local).AddTicks(138),
                            HashPassword = "PuB/hselpQNY0TYpY06RfnYVNjE=",
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("MonitoringApp.Model.Entities.Application", b =>
                {
                    b.HasOne("MonitoringApp.Model.Entities.IntegrationType", "IntegrationType")
                        .WithOne("Application")
                        .HasForeignKey("MonitoringApp.Model.Entities.Application", "IntegrationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IntegrationType");
                });

            modelBuilder.Entity("MonitoringApp.Model.Entities.ApplicationLog", b =>
                {
                    b.HasOne("MonitoringApp.Model.Entities.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("MonitoringApp.Model.Entities.User", b =>
                {
                    b.HasOne("MonitoringApp.Model.Entities.Role", "Roles")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("MonitoringApp.Model.Entities.IntegrationType", b =>
                {
                    b.Navigation("Application")
                        .IsRequired();
                });

            modelBuilder.Entity("MonitoringApp.Model.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
